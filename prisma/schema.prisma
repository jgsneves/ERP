generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentoTipo {
  COMPROVANTE_ENDERECO
  COMPROVANTE_CONTA_CORRENTE
  COMPROVANTE_TRANSFERENCIA

  // Empregado
  CONTRATO_DE_TRABALHO_ASSINADO
  HOLERITE_ASSINADA
  RECIBO_DE_VALE_DE_TRANSPORTE
  RECIBO_DE_REEMBOLSO
  ATESTADO
  FOLHA_DE_PONTO_ASSINADA

  // Médico & Empresa Médica
  CRM

  //Empresa médica
  CONTRATO_SOCIAL_ASSINADO
  CONTRATO_PRESTACAO_DE_SERVICO
  ALTERACAO_DE_CONTRATO_SOCIAL
  NOTA_FISCAL
  TFF
  DAS
}

model Documentos {
  Id                                  String           @id() @db.Uuid
  Nome                                String
  Tipo                                DocumentoTipo
  Url                                 String

  CriadoEm                            DateTime              @db.Timestamptz(6)
  ModificadoEm                        DateTime?             @db.Timestamptz(6)

  PessoaId                            String?               @db.Uuid
  Pessoa                              Pessoas?              @relation(fields: [PessoaId], references: [Id])

  EmpresaMedicaId                     String?               @db.Uuid
  EmpresaMedica                       EmpresasMedicas?      @relation(fields: [EmpresaMedicaId], references: [Id])

  EmpregadoPagamentoComprovante       EmpregadosPagamentos? @relation("Comprovante")

  EmpregadoPagamentoRecibo            EmpregadosPagamentos? @relation("Recibo")
}

enum TipoChavePix {
  CPF
  TELEFONE
  EMAIL
  HASH
}

model ContasCorrente {
  Id               String             @id() @db.Uuid
  Agencia          Int
  AgenciaDigito    Int
  Conta            Int
  ContaDigito      Int
  CodigoBanco      Int
  NomeBanco        String
  ChavePix         String?
  TipoChavePix     TipoChavePix?
  CriadoEm         DateTime           @db.Timestamptz(6)
  ModificadoEm     DateTime?          @db.Timestamptz(6)

  PessoaId         String?            @db.Uuid
  Pessoa           Pessoas?           @relation(fields: [PessoaId], references: [Id])

  EmpresaMedicaId  String?            @db.Uuid
  EmpresaMedica    EmpresasMedicas?   @relation(fields: [EmpresaMedicaId], references: [Id])
}

model EmpresasMedicas {
  Id               String           @id() @db.Uuid
  RazaoSocial      String
  Cnpj             String
  CriadoEm         DateTime         @db.Timestamptz(6)
  ModificadoEm     DateTime?        @db.Timestamptz(6)

  Endereco         Enderecos?       @relation(fields: [EnderecoId], references: [Id])
  EnderecoId       String?          @unique @db.Uuid

  ContasCorrentes  ContasCorrente[] 

  Socios           Pessoas[]

  Documentos       Documentos[]
}

model Enderecos {
  Id              String            @id() @db.Uuid
  Cep             String
  Logradouro      String
  Numero          Int
  Complemento     String
  Bairro          String
  Cidade          String
  Estado          String
  CriadoEm        DateTime          @db.Timestamptz(6)
  ModificadoEm    DateTime?         @db.Timestamptz(6)

  EmpresaMedica   EmpresasMedicas?
  EmpresaMedicaId String?           @unique @db.Uuid

  Pessoa          Pessoas?
  PessoaId        String?           @unique @db.Uuid
}

enum PessoasTipo {
  SOCIO
  EMPREGADO
  MEDICO
}

enum StatusAdmissao {
  EMPREGADO
  DEMITIDO
  EXPERIENCIA
}

enum ModalidadeTrabalho {
  REMOTO
  HIBRIDO
  PRESENCIAL
}

model Pessoas {
  Id                  String           @id() @db.Uuid
  Nome                String
  Cpf                 String
  DataNascimento      DateTime         @db.Timestamptz(6)
  CriadoEm            DateTime         @db.Timestamptz(6)
  ModificadoEm        DateTime?        @db.Timestamptz(6)
  Tipo                PessoasTipo

  ContasCorrentes     ContasCorrente[]

  EnderecoId          String?          @unique @db.Uuid
  Endereco            Enderecos?       @relation(fields: [EnderecoId], references: [Id])

  Documentos          Documentos[]

  //Tipo: Médico
  Crm                 String?
  EmpresaMedicaId     String?          @db.Uuid
  EmpresaMedica       EmpresasMedicas? @relation(fields: [EmpresaMedicaId], references: [Id])

  //Tipo: Sócio
  Participacao        Float?           @db.Real

  //Tipo: Empregado
  Salario             Float?
  StatusAdmissao      StatusAdmissao?
  ModalidadeTrabalho  ModalidadeTrabalho?
  Observacoes         EmpregadosObservacoes[]
  Pagamentos          EmpregadosPagamentos[]
}

model EmpregadosObservacoes {
  Id          String    @id @db.Uuid()
  Data        DateTime  @db.Timestamptz(6)
  Conteudo    String
  
  EmpregadoId String    @db.Uuid()
  Empregado   Pessoas   @relation(fields: [EmpregadoId], references: [Id])
}

enum EmpregadosPagamentosTipo {
  SALARIO
  DECIMO_TERCEIRO_SALARIO
  VALE_DE_TRANSPORTE
  REEMBOLSO
}

model EmpregadosPagamentos {
  Id              String      @id @db.Uuid()
  EmpregadoId     String      @db.Uuid()
  Empregado       Pessoas     @relation(fields: [EmpregadoId], references: [Id])
  Valor           Float
  Tipo            EmpregadosPagamentosTipo
  CriadoEm        DateTime    @db.Timestamptz(6)
  ModificadoEm    DateTime?   @db.Timestamptz(6)

  Comprovante     Documentos  @relation("Comprovante", fields: [ComprovanteId], references: [Id])
  ComprovanteId   String      @db.Uuid() @unique

  Recibo          Documentos? @relation("Recibo", fields: [ReciboId], references: [Id])
  ReciboId        String?     @db.Uuid() @unique
}